<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>How To Install Python 3 and Set Up a Local Programming Environment on macOS</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body>
<section id="how-to-install-python-3-and-set-up-a-local-programming-environment-on-macos" class="level1">
<h1>How To Install Python 3 and Set Up a Local Programming Environment on macOS</h1>
<p>Python is a versatile programming language that can be used for many different programming projects. First published in 1991 with a name inspired by the British comedy group Monty Python, the development team wanted to make Python a language that was fun to use. Easy to set up, and written in a relatively straightforward style with immediate feedback on errors, Python is a great choice for beginners and experienced developers alike. Python 3 is the most current version of the language and is considered to be the future of Python.</p>
<p>This tutorial will guide you through installing Python 3 on your local macOS machine and setting up a programming environment via the command line.</p>
<section id="prerequisites-1" class="level2">
<h2>Prerequisites</h2>
<p>You will need a macOS computer with administrative access that is connected to the internet.</p>
</section>
<section id="step-1-opening-terminal" class="level2">
<h2>Step 1 — Opening Terminal</h2>
<p>We’ll be completing most of our installation and set up on the command line, which is a non-graphical way to interact with your computer. That is, instead of clicking on buttons, you’ll be typing in text and receiving feedback from your computer through text as well. The command line, also known as a shell, can help you modify and automate many of the tasks you do on a computer every day, and is an essential tool for software developers.</p>
<p>The macOS Terminal is an application you can use to access the command line interface. Like any other application, you can find it by going into Finder, navigating to the Applications folder, and then into the Utilities folder. From here, double-click the Terminal like any other application to open it up. Alternatively, you can use Spotlight by holding down the <code>command</code> and <code>spacebar</code> keys to find Terminal by typing it out in the box that appears.</p>
<figure>
<img src="../media/file1.png" alt="macOS Terminal" /><figcaption>macOS Terminal</figcaption>
</figure>
<p>There are many more Terminal commands to learn that can enable you to do more powerful things. The article “<a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-the-linux-terminal">An Introduction to the Linux Terminal</a>” can get you better oriented with the Linux Terminal, which is similar to the macOS Terminal.</p>
</section>
<section id="step-2-installing-xcode" class="level2">
<h2>Step 2 — Installing Xcode</h2>
<p>Xcode is an integrated development environment (IDE) that is comprised of software development tools for macOS. You may have Xcode installed already. To check, in your Terminal window, type:</p>
<figure class="code">
<pre class="command"><code>xcode-select -p</code></pre>
</figure>
<p>If you receive the following output, then Xcode is installed:</p>
<figure class="code">
<figcaption>
Output
</figcaption>
<pre><code>/Library/Developer/CommandLineTools</code></pre>
</figure>
<p>If you received an error, then in your web browser install <a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12&amp;ign-mpt=uo%3D2">Xcode from the App Store</a> and accept the default options.</p>
<p>Once Xcode is installed, return to your Terminal window. Next, you’ll need to install Xcode’s separate Command Line Tools app, which you can do by typing:</p>
<figure class="code">
<pre class="command"><code>xcode-select --install</code></pre>
</figure>
<p>At this point, Xcode and its Command Line Tools app are fully installed, and we are ready to install the package manager Homebrew.</p>
</section>
<section id="step-3-installing-and-setting-up-homebrew" class="level2">
<h2>Step 3 — Installing and Setting Up Homebrew</h2>
<p>While the OS X Terminal has a lot of the functionality of Linux Terminals and other Unix systems, it does not ship with a good package manager. A <strong>package manager</strong> is a collection of software tools that work to automate installation processes that include initial software installation, upgrading and configuring of software, and removing software as needed. They keep installations in a central location and can maintain all software packages on the system in formats that are commonly used. <strong>Homebrew</strong> provides OS X with a free and open source software package managing system that simplifies the installation of software on OS X.</p>
<p>To install Homebrew, type this into your Terminal window:</p>
<figure class="code">
<pre class="command"><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre>
</figure>
<p>Homebrew is made with Ruby, so it will be modifying your computer’s Ruby path. The <code>curl</code> command pulls a script from the specified URL. This script will explain what it will do and then pauses the process to prompt you to confirm. This provides you with a lot of feedback on what the script is going to be doing to your system and gives you the opportunity to verify the process.</p>
<p>If you need to enter your password note that your keystrokes will not display in the Terminal window but they will be recorded, simply press the <code>return</code> key once you’ve entered your password. Otherwise press the letter <code>y</code> for “yes” whenever you are prompted to confirm the installation.</p>
<p>Let’s walk through the flags that are associated with the <code>curl</code> command:</p>
<ul>
<li>The -<code>f</code> or <code>--fail</code> flag tells the Terminal window to give no HTML document output on server errors.</li>
<li>The <code>-s</code> or <code>--silent</code> flag mutes <code>curl</code> so that it does not show the progress meter, and combined with the <code>-S</code> or <code>--show-error</code> flag it will ensure that <code>curl</code> shows an error message if it fails.</li>
<li>The <code>-L</code> or <code>--location</code> flag will tell <code>curl</code> to redo the request to a new place if the server reports that the requested page has moved to a different location.</li>
</ul>
<p>Once the installation process is complete, we’ll put the Homebrew directory at the top of the <code>PATH</code> environment variable. This will ensure that Homebrew installations will be called over the tools that Mac OS X may select automatically that could run counter to the development environment we’re creating.</p>
<p>You should create or open the <code>~/.bash_profile</code> file with the command-line text editor <strong>nano</strong> using the <code>nano</code> command:</p>
<figure class="code">
<pre class="command"><code>nano ~/.bash_profile</code></pre>
</figure>
<p>Once the file opens up in the Terminal window, write the following:</p>
<figure class="code">
<pre><code>export PATH=/usr/local/bin:$PATH</code></pre>
</figure>
<p>To save your changes, hold down the <code>control</code> key and the letter <code>o</code>, and when prompted press the <code>return</code> key. Now you can exit nano by holding the <code>control</code> key and the letter <code>x</code>.</p>
<p>For these changes to activate, in the Terminal window, type:</p>
<figure class="code">
<pre class="command"><code>source ~/.bash_profile</code></pre>
</figure>
<p>Once you have done this, the changes you have made to the <code>PATH</code> environment variable will be effective.</p>
<p>We can make sure that Homebrew was successfully installed by typing:</p>
<figure class="code">
<pre class="command"><code>brew doctor</code></pre>
</figure>
<p>If no updates are required at this time, the Terminal output will read:</p>
<figure class="code">
<figcaption>
Output
</figcaption>
<pre><code>Your system is ready to brew.</code></pre>
</figure>
<p>Otherwise, you may get a warning to run another command such as <code>brew update</code> to ensure that your installation of Homebrew is up to date.</p>
<p>Once Homebrew is ready, you can install Python 3.</p>
</section>
<section id="step-4-installing-python-3" class="level2">
<h2>Step 4 — Installing Python 3</h2>
<p>You can use Homebrew to search for everything you can install with the <code>brew search</code> command, but to provide us with a shorter list, let’s instead search for just the available Python-related packages or modules:</p>
<figure class="code">
<pre class="command"><code>brew search python</code></pre>
</figure>
<p>The Terminal will output a list of what you can install, like this:</p>
<figure class="code">
<figcaption>
Output
</figcaption>
<pre><code>app-engine-python          micropython                python3                 
boost-python               python                     wxpython                 
gst-python                 python-markdown            zpython                  
homebrew/apache/mod_python               homebrew/versions/gst-python010        
homebrew/python/python-dbus              Caskroom/cask/kk7ds-python-runtime     
homebrew/python/vpython                  Caskroom/cask/mysql-connector-python   </code></pre>
</figure>
<p>Python 3 will be among the items on the list. Let’s go ahead and install it:</p>
<figure class="code">
<pre class="command"><code>brew install python3</code></pre>
</figure>
<p>The Terminal window will give you feedback regarding the installation process of Python 3, it may take a few minutes before installation is complete.</p>
<p>Along with Python 3, Homebrew will install <strong>pip</strong>, <strong>setuptools</strong> and <strong>wheel</strong>.</p>
<p>A tool for use with Python, we will use <strong>pip</strong> to install and manage programming packages we may want to use in our development projects. You can install Python packages by typing:</p>
<figure class="code">
<pre class="command"><code>pip3 install <span class="highlight">package_name</span></code></pre>
</figure>
<p>Here, <code><span class="highlight">package_name</span></code> can refer to any Python package or library, such as Django for web development or NumPy for scientific computing. So if you would like to install NumPy, you can do so with the command <code>pip3 install numpy</code>.</p>
<p><strong>setuptools</strong> facilitates packaging Python projects, and <strong>wheel</strong> is a built-package format for Python that can speed up your software production by reducing the number of times you need to compile.</p>
<p>To check the version of Python 3 that you installed, you can type:</p>
<figure class="code">
<pre class="command"><code>python3 --version</code></pre>
</figure>
<p>This will output the specific version of Python that is currently installed, which will by default be the most up-to-date stable version of Python 3 that is available.</p>
<p>To update your version of Python 3, you can first update Homebrew and then update Python:</p>
<figure class="code">
<pre class="command"><code>brew update
brew upgrade python3</code></pre>
</figure>
<p>It is good practice to ensure that your version of Python is up-to-date.</p>
</section>
<section id="step-5-creating-a-virtual-environment" class="level2">
<h2>Step 5 — Creating a Virtual Environment</h2>
<p>Now that we have Xcode, Homebrew, and Python installed, we can go on to create our programming environment.</p>
<p>Virtual environments enable you to have an isolated space on your computer for Python projects, ensuring that each of your projects can have its own set of dependencies that won’t disrupt any of your other projects.</p>
<p>Setting up a programming environment provides us with greater control over our Python projects and over how different versions of packages are handled. This is especially important when working with third-party packages.</p>
<p>You can set up as many Python programming environments as you would like. Each environment is basically a directory or folder in your computer that has a few scripts in it to make it act as an environment.</p>
<p>Choose which directory you would like to put your Python programming environments in, or create a new directory with <code>mkdir</code>, as in:</p>
<figure class="code">
<pre class="command"><code>mkdir <span class="highlight">Environments</span>
cd <span class="highlight">Environments</span></code></pre>
</figure>
<p>Once you are in the directory where you would like the environments to live, you can create an environment by running the following command:</p>
<figure class="code">
<pre class="command"><code>python3.6 -m venv <span class="highlight">my_env</span></code></pre>
</figure>
<p>Essentially, this command creates a new directory (in this case called <span class="highlight">my_env</span>) that contains a few items: - The <code>pyvenv.cfg</code> file points to the Python installation that you used to run the command. - The <code>lib</code> subdirectory contains a copy of the Python version and has a <code>site-packages</code> subdirectory inside it that starts out empty but will eventually hold the relevant third-party modules that you install. - The <code>include</code> subdirectory compiles packages. - The <code>bin</code> subdirectory has a copy of the Python binary along with the <em>activate</em> shell script that is used to set up the environment.</p>
<p>Together, these files work to make sure that your projects are isolated from the broader context of your local machine, so that system files and project files don’t mix. This is good practice for version control and to ensure that each of your projects has access to the particular packages that it needs.</p>
<p>To use this environment, you need to activate it, which you can do by typing the following command that calls the activate script:</p>
<figure class="code">
<pre class="command"><code>source <span class="highlight">my_env</span>/bin/activate</code></pre>
</figure>
<p>Your prompt will now be prefixed with the name of your environment, in this case it is called <span class="highlight">my_env</span>:</p>
<figure class="code">
<pre><code>(my_env) Sammys-MBP:~ sammy$</code></pre>
</figure>
<p>This prefix lets us know that the environment <span class="highlight">my_env</span> is currently active, meaning that when we create programs here they will use only this particular environment’s settings and packages.</p>
<div class="note">
<p><strong>Note:</strong> Within the virtual environment, you can use the command <code>python</code> instead of <code>python3</code>, and <code>pip</code> instead of <code>pip3</code> if you would prefer. If you use Python 3 on your machine outside of an environment, you’ll need to use the <code>python3</code> and <code>pip3</code> commands exclusively, as <code>python</code> and <code>pip</code> will call an earlier version of Python.</p>
</div>
<p>After following these steps, your virtual environment is ready to use.</p>
</section>
<section id="step-6-creating-a-simple-program" class="level2">
<h2>Step 6 — Creating a Simple Program</h2>
<p>Now that we have our virtual environment set up, let’s create a simple “Hello, World!” program. This will make sure that our environment is working and gives us the opportunity to become more familiar with Python if we aren’t already.</p>
<p>To do this, we’ll open up a command-line text editor such as nano and create a new file:</p>
<figure class="code">
<pre><code>(my_env) Sammys-MBP:~ sammy$ nano hello.py</code></pre>
</figure>
<p>Once the text file opens up in Terminal we’ll type out our program:</p>
<figure class="code">
<pre class="python"><code>print(&quot;Hello, World!&quot;)</code></pre>
</figure>
<p>Exit nano by typing the <code>control</code> and <code>x</code> keys, and when prompted to save the file press <code>y</code>.</p>
<p>Once you exit out of nano and return to your shell, let’s run the program:</p>
<figure class="code">
<pre><code>(my_env) Sammys-MBP:~ sammy$ python hello.py</code></pre>
</figure>
<p>The hello.py program that you just created should cause Terminal to produce the following output:</p>
<figure class="code">
<figcaption>
Output
</figcaption>
<pre><code>Hello, World!</code></pre>
</figure>
<p>To leave the environment, simply type the command <code>deactivate</code> and you’ll return to your original directory.</p>
</section>
<section id="conclusion-2" class="level2">
<h2>Conclusion</h2>
<p>Congratulations! At this point you have a Python 3 programming environment set up on your local Mac OS X machine and can begin a coding project!</p>
<p>To set up Python 3 on another computer, follow the <a href="https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3">local programming environment guides</a> for <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-local-programming-environment-for-python-3-in-ubuntu-16-04">Ubuntu 16.04</a>, <a href="https://www.digitalocean.com/community/tutorials/how-to-install-python-3-and-set-up-a-local-programming-environment-on-debian-8">Debian 8</a>, <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-local-programming-environment-for-python-3-on-centos-7">CentOS 7</a>, or <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-local-programming-environment-for-python-3-on-windows-10">Windows 10</a>. You can also read about <a href="ch007.xhtml">installing Python and setting up a programming environment on an Ubuntu 16.04 server</a>, which is especially useful when working on development teams.</p>
<p>With your local machine ready for software development, you can continue to learn more about coding in Python by following “<a href="ch011.xhtml">Understanding Data Types in Python 3</a>” and “<a href="ch017.xhtml">How To Use Variables in Python 3</a>”.</p>
</section>
</section>
</body>
</html>

